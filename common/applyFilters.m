function groupData = applyFilters(sortedData,groupIndex,groupName)
%% Filter data in sortedData by grouping factors defined in groupIndex.
% Man Ho Wong, University of Pittsburgh.
% -------------------------------------------------------------------------
% Inputs: - sortedData : Sorted recording data; 
%                        generated by importRecordings.m
%         - groupIndex : A table containing grouping info;
%                        can be generated with addGroup.m
%         - groupName : Name of the group to be filtered
% Output: - dataByGroup : Data filtered by grouping factors in groupIndex.

%% Check if groupName is correct

if ~ismember(groupName, groupIndex.Properties.RowNames)
    fprintf('The group ''%s'' does not exist.\n', groupName)
    groupData = [];
    return
end

%% Create a merged filter from the combination of grouping factors and 
%  apply the filter to sortedData

factors = groupIndex.Properties.VariableNames;
factors = factors(~ismember(factors,{'minAge', 'maxAge'}));


% Get a merged filter from the combination of all factors beside age
mergedFilter = ones([height(sortedData),1]);
nFactors = length(factors);
for k=1:nFactors
    mergedFilter = mergedFilter & ismember(sortedData.(factors{k}), ...
                                           groupIndex.(factors{k}){groupName});
end

% Add age and include to the mergerd filter
mergedFilter = mergedFilter & ...
               sortedData.age >= groupIndex.minAge{groupName} & ...
               sortedData.age <= groupIndex.maxAge{groupName} & ...
               sortedData.include==1;

% Apply merged filter
groupData = sortedData(mergedFilter,:);